#!/bin/bash
# \author bogdzn

#####################################
############ VARIABLES ##############
#####################################

# print colors
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Cyan='\e[0;36m'         # Cyan
NC="\e[m"               # Color Reset

PKG_HELPER=""
CSFML_SCRIPT_ADDRESS="https://raw.githubusercontent.com/Epitech/dump/master/build_csfml.sh"

#####################################
############ FUNCTIONS ##############
#####################################

display_help () {
    printf "Welcome to ${Yellow}Bogdzn's ezdump script${NC}, a basic tool to quickly dump whatever you need !\n"
    printf "Here are the options you might need:\n"
    printf "\t${Cyan}-h\t${NC}Display this message.\n"
    printf "\t${Cyan}-d\t${NC}Sets the dotfiles repository url (For your bashrc, etc...).\n"
    printf "\t${Cyan}-f\t${NC}Sets the package list file path.\n"
}

check_if_error () {
    if [ "$1" -ne 0 ]; then
        printf "${Red}ERROR.${NC}\n\n"
        read -p "Do you want to exit the script ? [y/N] " yn
        case "$yn" in
            y|Y) exit 0 ;;
            *) return ;;
        esac

    else printf "${Green}SUCCESS.${NC}\n"

    fi
}

install_criterion () {
    read -p "Do you want to install Epitech's supported Criterion version ? [Y/n] " yn
    case "$yn" in
        n|N) return ;;
        *) ;;
    esac

    URL="https://github.com/snaipe/criterion/releases/download/v2.3.2"
    TARBALL="criterion-v2.3.2-linux-x86_64.tar.bz2"
    DIR="criterion-v2.3.2"
    DST="/usr/local/"

    cd /tmp && rm "$TARBALL"; rm -rf "$DIR"
    install "wget"
    printf "Installing Criterion: "
    wget "${URL}/${TARBALL}" && tar xjf "$TARBALL"
    sudo sh -c "echo "/usr/local/lib" > /etc/ld.so.conf.d/criterion.conf && cp -r "$DIR"/include/* $"DST"/include && cp -r "$DIR"/lib/* "$DST"/lib/"

    check_if_error "$?"
}

install_csfml () {
    read -p "Do you want to install Epitech's supported CSFML version ? [Y/n] " yn
    case "$yn" in
        n|N) return ;;
        *) curl "$CSFML_SCRIPT_ADDRESS" | sudo bash ;;
    esac

    check_if_error "$?"
}

update () {
    printf "${Yellow}Updating packages: ${NC}"

    case "$OS_TYPE" in
        archlinux) sudo pacman --noconfirm -Syu > /dev/null 1>&2 ;;
        debian) sudo apt -y update && sudo apt -y upgrade > /dev/null 1>&2 ;;
        fedora) sudo dnf -y update > /dev/null 1>&2 ;;
        opensuse) sudo zypper -y update > /dev/null 1>&2 ;;
    esac

    check_if_error "$?"
}

install_yay () {
    [ "OS_TYPE" = "archlinux" ] || return

    install "patch gcc git make cmake go"
    git clone https://aur.archlinux.org/yay-git.git && cd yay-git
    sudo makepkg -si

    check_if_error "$?" ; cd ..
}

get_pkg_manager () {
    case "$OS_TYPE" in
        archlinux) echo "sudo pacman --noconfirm --needed -S" ;;
        debian) echo "sudo apt -y install" ;;
        fedora) echo "sudo dnf -y install" ;;
        opensuse) echo "sudo zypper -y install" ;;
        *) echo "" ;;
    esac
}

install () {
    printf "${Yellow}Installing${NC}${Blue}"$1"${NC}: "
    bash -c "$"PKG_HELPER" "$1"" > /dev/null 1>&2 || bash -c "$"PKG_HELPER" "$1"" >/dev/null 1>&2
    check_if_error "$?"
}

get_package_helper () {
    read -p "Do you want to install an alternate package helper ? (Snap, yay, etc...) [Y/n] " yn
    case "$yn" in
        n|N*) return ;;
        *) ;;
    esac

    read -p "Ok, please specify the name of the package installer you want to install: " pkg
    case "$pkg" in
        snap) PKG_HELPER="sudo snap install" && install "snapd" ;;
        flatpak) PKG_HELPER="sudo flatpak install" && install "flatpak" ;;
        yay) PKG_HELPER="yay -Syu --noconfirm" && install_yay ;;
        *) printf "${Red}Error:${NC} unrecognised package manager. Please edit the script or file an issue.\n" && exit 1 ;;
    esac
}

install_loop () {
    while IFS = read -r line || [ -n "$line" ] ; do
        install "$line"
    done < "$PKG_FILE_PATH"
}

get_os () {
    which zypper &> /dev/null && echo "opensuse"
    which pacman &> /dev/null && echo "archlinux"
    which dnf &> /dev/null && echo "fedora"
    which apt &> /dev/null && echo "debian"
}

dotfiles () {
    read -p "Install dotfiles ? [Y/n] " yn

    case "$yn" in
        n|N) return ;;
        *) ;;
    esac

    printf "${Cyan}Installing dotfiles...${NC}\n"
    git clone "${DOTFILES_URL}" df || check_if_error "$?"
    rm -rf /home/*/.config; rm -rf /home/*/.*rc
    mv -v /home/*/.config ~/; mv -v /home/*/.*rc ~/
}

disable_systembeep () {
    sudo rmmod pcskpkr > /dev/null 1>&2 && echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf
}

init_script () {
    # input handling is set here for convenience
    while getopts "hd:f:" opt; do case "$opt" in
        h) display_help && exit 0 ;;
        d) DOTFILES_URL=${OPTARG} ;;
        f) PKG_FILE_PATH=${OPTARG} ;;
        *) printf "${Red}/!\\${NC} Invalid option: -${Yellow}%s${NC}\n" "$OPTARG" && exit 1 ;;
    esac done

    OS_TYPE=$(get_os)
    PKG_MANAGER=$(get_pkg_manager)

    [ -z "$DOTFILES_URL" ] || DOTFILES_URL="https://github.com/bogdzn/dotfiles"
    [ -z "$PKG_FILE_PATH" ] || PKG_FILE_PATH="./pkgs"

    if [[ "$EUID" -ne 0 ]] ; then
        printf "${Red}This script must be run as root.${NC}\n"
        exit 1

    elif [[ "$OS_TYPE" = "" ]] ; then
        printf "${Red}Error:${NC} Unsupported distribution.\n"
        printf "Only ${Cyan}Archlinux${NC}, ${Red}Debian${NC}, ${Blue}Fedora${NC} and ${Green}OpenSUSE${NC} are supported.\n"
        printf "Please modify the script or file an issue here: https://github.com/bogdzn/ezdump\n"
        exit 1
    fi
}

#####################################
############# SCRIPT ################
#####################################
# todo add alwaysYes option and fakeInstall option for debug purposes

init_script "$@"

update

get_package_helper

install_loop

install_csfml

install_criterion

dotfiles

disable_systembeep

printf "${Green}All done ! You config is ready.${NC}\n\n"
